/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Game {
  export type GameOptionsStruct = { id: string };

  export type GameOptionsStructOutput = [id: string] & { id: string };
}

export interface GameInterface extends Interface {
  getFunction(
    nameOrSignature: "addGame" | "getGame" | "getGameData" | "updateGame"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGame",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateGame", data: BytesLike): Result;
}

export interface Game extends BaseContract {
  connect(runner?: ContractRunner | null): Game;
  waitForDeployment(): Promise<this>;

  interface: GameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGame: TypedContractMethod<[_id: string], [void], "nonpayable">;

  getGame: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getGameData: TypedContractMethod<
    [],
    [Game.GameOptionsStructOutput[]],
    "view"
  >;

  updateGame: TypedContractMethod<
    [index: BigNumberish, _newId: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGame"
  ): TypedContractMethod<[_id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGameData"
  ): TypedContractMethod<[], [Game.GameOptionsStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "updateGame"
  ): TypedContractMethod<
    [index: BigNumberish, _newId: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
