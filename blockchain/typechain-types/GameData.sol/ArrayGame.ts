/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ArrayGame {
  export type PlayerStruct = {
    id: string;
    wallet: string;
    amount: string;
    ready: boolean;
  };

  export type PlayerStructOutput = [
    id: string,
    wallet: string,
    amount: string,
    ready: boolean
  ] & { id: string; wallet: string; amount: string; ready: boolean };
}

export interface ArrayGameInterface extends Interface {
  getFunction(nameOrSignature: "getGameData"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGameData",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getGameData",
    data: BytesLike
  ): Result;
}

export interface ArrayGame extends BaseContract {
  connect(runner?: ContractRunner | null): ArrayGame;
  waitForDeployment(): Promise<this>;

  interface: ArrayGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getGameData: TypedContractMethod<
    [],
    [[string, string[], string[], string[], boolean[]]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getGameData"
  ): TypedContractMethod<
    [],
    [[string, string[], string[], string[], boolean[]]],
    "view"
  >;

  filters: {};
}
